{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction to Femscript","text":"<p>Femscript is a simple scripting language created as a personal project to learn Rust. It is asynchronous, allowing you to execute Femscript code in Python, exchange Python values with Femscript, and vice versa, all with seamless integration.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Asynchronous: Femscript is designed to be asynchronous, ensuring it does not block the execution of the main code.</li> <li>Easy Integration with Python: Executing Femscript code in Python is straightforward, and binding functions and passing variables between Python and Femscript is simple.</li> <li>Lightweight: The project is lightweight and easy to set up, making it suitable for quick prototyping and integration into existing projects.</li> </ul>"},{"location":"#example-uses","title":"Example Uses","text":"<p>Here are a few example use cases for Femscript:</p> <ul> <li> <p>Adding Custom Commands in a Discord Bot:   Femscript can be used to allow users to write their own custom commands for a Discord bot. With the ability to easily bind functions and pass variables between Python and Femscript, you can integrate scripting functionality directly into your bot.</p> </li> <li> <p>Feel free to come up with your own use cases:   Since Femscript is flexible, you can think of many different ways to use it. The possibilities are yours to explore!</p> </li> </ul>"},{"location":"#what-uses-femscript","title":"What Uses Femscript","text":"<ul> <li> <p>Fembot Discord Bot:   Femscript is used in the Fembot Discord Bot to allow dynamic scripting and custom command handling.</p> </li> <li> <p>Femscript Playground:   You can try Femscript on my website at czubix.dev, where the Femscript Playground allows you to experiment with the language.</p> </li> </ul>"},{"location":"installation/","title":"Installation","text":"<p>To install Femscript, follow the steps below:</p>"},{"location":"installation/#requirements","title":"Requirements","text":"<ul> <li>You need to have Rust and Make installed on your system.</li> <li>Install the required Python packages:     <pre><code>pip install -r requirements.txt\n</code></pre></li> </ul>"},{"location":"installation/#installation-steps","title":"Installation Steps","text":"<ol> <li> <p>Clone the repository:     <pre><code>git clone https://github.com/czubix/femscript.git\n</code></pre></p> </li> <li> <p>Navigate to the project directory:     <pre><code>cd femscript\n</code></pre></p> </li> <li> <p>Build the project:     <pre><code>make build PYTHON_VERSION=your_python_command\n</code></pre>     (Optional: To build in release mode, use the following command instead):     <pre><code>make build PYTHON_VERSION=your_python_command EXTRA_ARGS=\"--release\"\n</code></pre></p> </li> <li> <p>Install the package:     <pre><code>make install PYTHON_VERSION=your_python_command PIP_VERSION=your_pip_command\n</code></pre></p> </li> </ol>"},{"location":"python/","title":"Femscript Python API Documentation","text":"<p>The <code>Femscript</code> Python API allows seamless integration of Femscript code with Python. This API provides tools for parsing, executing, and interacting with Femscript, enabling you to bind Python functions, convert data between Python and Femscript, and handle Femscript tokens and AST (Abstract Syntax Tree).</p>"},{"location":"python/#classes-and-functions","title":"Classes and Functions","text":""},{"location":"python/#tokentype","title":"<code>TokenType</code>","text":"<ul> <li>\"Str\"</li> <li>\"Int\"</li> <li>\"Bool\"</li> <li>\"None\"</li> <li>\"List\"</li> <li>\"Bytes\"</li> <li>\"Scope\"</li> </ul>"},{"location":"python/#class-token-typeddict","title":"class <code>Token</code> : <code>TypedDict</code>","text":"<ul> <li>Structure:<ul> <li><code>type</code>: TokenType</li> <li><code>value</code>: str</li> <li><code>number</code>: float</li> <li><code>list</code>: [Token...]</li> <li><code>bytes</code>: bytes</li> <li><code>scope</code>: [Variable...]?</li> <li><code>pyobject</code>: Any?</li> </ul> </li> </ul>"},{"location":"python/#class-variable-typeddict","title":"class <code>Variable</code> : <code>TypedDict</code>","text":"<ul> <li>Structure:<ul> <li><code>name</code>: str</li> <li><code>value</code>: Token</li> </ul> </li> </ul>"},{"location":"python/#function-var","title":"function <code>var</code>","text":"<p>Creates a Femscript variable.</p> <pre><code>def var(\n    name: str,\n    value: Optional[Any] = None,\n    *,\n    variables: Optional[list[Variable]] = None\n) -&gt; Variable\n</code></pre> <ul> <li>Parameters:<ul> <li><code>name</code>: str - Name of the variable.</li> <li><code>value</code>: Any - Python object</li> <li><code>variables</code>: [Variable]? - Optional scope for nested variables.</li> </ul> </li> <li>Returns: Variable</li> <li>Example: <pre><code>from femscript import Femscript, var\n\nfs = Femscript(\"x + y\", variables=[var(\"x\", 35), var(\"y\", 34)])\n</code></pre></li> </ul>"},{"location":"python/#class-femscript","title":"class <code>Femscript</code>","text":"<p>The <code>Femscript</code> class provides the primary interface for parsing and executing Femscript code. It allows defining variables, registering custom Python functions, and running Femscript scripts asynchronously.</p> <pre><code>class Femscript:\n    def __init__(\n        code: Optional[str] = None,\n        *,\n        variables: Optional[list[Variable]] = None,\n        functions: Optional[list[Callable[[str, list[Token], list[Variable]], Token]]] = None\n    ) -&gt; None\n</code></pre> <ul> <li>Parameters:<ul> <li><code>code</code>: str? - Femscript code to parse during initialization.</li> <li><code>variables</code>: [Variable]? - Predefined variables to add to the script's scope.</li> <li><code>functions</code>: [(str, [Token...], [Variable...]) -&gt; Token]? - Custom Python functions to bind to Femscript.</li> </ul> </li> <li>Example: <pre><code>from femscript import Femscript, var\n\nfs = Femscript(\"x + y\", variables=[var(\"x\", 35), var(\"y\", 34)])\n</code></pre></li> </ul>"},{"location":"python/#classmethod-to_fs","title":"classmethod <code>to_fs</code>","text":"<p>Converts a Python object into a Femscript token.</p> <pre><code>@classmethod\ndef to_fs(obj: Any) -&gt; Token\n</code></pre> <ul> <li>Parameters:<ul> <li><code>obj</code>: Any - Python object to convert.</li> </ul> </li> <li>Returns: Token</li> </ul>"},{"location":"python/#classmethod-to_py","title":"classmethod <code>to_py</code>","text":"<p>Converts a Femscript token into a Python object.</p> <pre><code>@classmethod\ndef to_py(token: Token) -&gt; Any\n</code></pre> <ul> <li>Parameters:<ul> <li><code>token</code>: Token - Femscript token to convert.</li> </ul> </li> <li>Returns: Any</li> </ul>"},{"location":"python/#method-add_variable","title":"method <code>add_variable</code>","text":"<p>Adds or updates a variable in the script's scope.</p> <pre><code>def add_variable(self, variable: Variable) -&gt; None\n</code></pre> <ul> <li>Parameters:<ul> <li><code>variable</code>: Variable - A variable to add or update.</li> </ul> </li> </ul>"},{"location":"python/#method-wrap_function","title":"method <code>wrap_function</code>","text":"<p>Wraps a Python function to make it callable from Femscript.</p> <pre><code>def wrap_function(\n    self,\n    func: Optional[Callable[..., object]] = None,\n    *,\n    func_name: Optional[str] = None,\n    with_name: Optional[bool] = False\n) -&gt; Callable\n</code></pre> <ul> <li>Parameters:<ul> <li><code>func</code>: Callable? - The Python function to wrap.</li> <li><code>func_name</code>: str? - Name to use for the function in Femscript (default: Python function name)</li> <li><code>with_name</code>: bool? - If <code>True</code>, the function receives its Femscript name as the first argument.</li> </ul> </li> <li>Returns: Callable</li> <li>Example: <pre><code>fs = Femscript()\n\n@fs.wrap_function()\ndef add(a: int, b: int) -&gt; int:\n    return a + b\n\n@fs.wrap_function()\nasync def something(**kwargs) -&gt; Any:\n    # do something asynchronously\n    ...\n\nfs.wrap_function(print)\n</code></pre></li> </ul>"},{"location":"python/#async-method-execute","title":"async method execute","text":"<p>Executes the parsed AST asynchronously.</p> <pre><code>async def execute(self, *, debug: bool = False) -&gt; Any\n</code></pre> <ul> <li>Parameters:<ul> <li><code>debug</code>: bool? - If <code>True</code>, the script execution environment includes the <code>print</code> and <code>debug</code> built-in functions.</li> </ul> </li> <li>Returns: Any</li> <li>Example: <pre><code>from femscript import Femscript\n\nfs = Femscript(\"x = 10; x\")\nresult = await fs.execute()\n\nprint(result) # Outputs: 10\n</code></pre></li> </ul>"},{"location":"python/#examples","title":"Examples","text":"<ol> <li> <p>Basic Execution     <pre><code>import asyncio\nfrom femscript import Femscript, var\n\nasync def main() -&gt; None:\n    fs = Femscript(\"x = 35; x + y\", variables=[var(\"y\", 34)])\n    result = await fs.execute()\n    print(result) # Ouputs: 69\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre></p> </li> <li> <p>Binding Python Functions     <pre><code>fs = Femscript(\"add(35, 34)\")\n\n@fs.wrap_function()\ndef add(a: int, b: int) -&gt; int:\n    return a + b\n\nresult = await fs.execute()\n\nprint(result) # Outputs: 69\n</code></pre></p> </li> </ol>"},{"location":"femscript/conditionals/","title":"Conditional Statements (<code>if</code>)","text":"<p>The <code>if</code> statement in Femscript is used to execute code based on a condition. It provides a way to handle decision-making logic in your scripts. Unlike in some other languages, the <code>condition</code> in Femscript is not just a boolean expression\u2014it is a block of code. The value of the condition is determined by the result of the last operation in the block.</p> <p>An optional <code>else</code> block can be used to execute code when the condition evaluates to <code>false</code>.</p>"},{"location":"femscript/conditionals/#syntax","title":"Syntax","text":"<p>Conditionals in Femscript use the following structure:</p> <pre><code>if { condition } {\n    # Code to execute if condition is true\n} else {\n    # Code to execute if condition is false (optional)\n}\n</code></pre> <p>The <code>condition</code> is a block enclosed in <code>{}</code> that can contain multiple operations. The value of the condition is determined by the last operation inside the block.</p>"},{"location":"femscript/conditionals/#examples","title":"Examples","text":""},{"location":"femscript/conditionals/#basic-example","title":"Basic Example","text":"<pre><code>person = {\n    name = \"Joe\";\n    age = 17;\n\n    if { age &gt;= 18 } {\n        message = format(\"{name} is an adult.\");\n    } else {\n        message = format(\"{name} is a minor.\");\n    }\n};\n\nprint(person.message); # Outputs: Joe is a minor.\n</code></pre> <p>In this example:</p> <ol> <li>The condition <code>{ age &gt;= 18 }</code> evaluates to <code>false</code>.</li> <li>The <code>else</code> block is executed.</li> </ol>"},{"location":"femscript/conditionals/#complex-conditions","title":"Complex Conditions","text":"<p>Condition can perform multiple operations:</p> <pre><code>x = 35;\ny = 34;\n\nif {\n    total = x + y;\n    total &gt; 10 # This line is returned as the condition's value\n} {\n    result = format(\"{total} is greater than 10.\");\n} else {\n    result = format(\"{total} is 10 or less.\");\n}\n\nprint(total); # Outputs: 69\nprint(result); # Outputs: 69 is greater than 10.\n</code></pre> <p>Here:</p> <ol> <li>The <code>total</code> variable is calculated within the condition block.</li> <li>The result of the block (<code>total &gt; 10</code>) determines which branch of the <code>if</code> statement is executed.</li> </ol>"},{"location":"femscript/functions/","title":"Functions","text":"<p>A function in Femscript is a reusable block of code defined with the <code>fn</code> keyword. Functions allow you to encapsulate logic and improve code organization. They can accept parameters, perform operations, and return results. In Femscript, the value of the last expression in a function is automatically returned.</p>"},{"location":"femscript/functions/#defining-functions","title":"Defining Functions","text":"<p>Functions are defined with the <code>fn</code> keyword, followed by the function name, a list of parameters in parentheses, and the function body enclosed in curly braces <code>{}</code>. For example:</p> <pre><code>fn add(a, b) {\n    a + b\n}\n</code></pre> <p>In this example, the function <code>add</code> takes two parameters (<code>a</code> and <code>b</code>) and returns their sum.</p>"},{"location":"femscript/functions/#calling-functions","title":"Calling Functions","text":"<p>To call a function, use its name followed by arguments in parentheses:</p> <pre><code>print(add(35, 34)); # Outputs: 69\n</code></pre>"},{"location":"femscript/functions/#functions-with-conditional-logic","title":"Functions with Conditional Logic","text":"<p>Functions can include conditional statements to control their behaviour:</p> <pre><code>fn is_even(number) {\n    if { number % 2 == 0 } {\n        \"even\"\n    } else {\n        \"odd\"\n    }\n}\n\nprint(is_even(2)); # Outputs: even\nprint(is_even(3)); # Outputs: odd\n</code></pre>"},{"location":"femscript/functions/#recursive-functions","title":"Recursive Functions","text":"<p>Femscript supports recursion, where a function can call itself. However, Femscript limits the maximum recursion depth to <code>10</code>. If this limit is exceeded, the program will throw a <code>RecursionError</code>. For example:</p> <pre><code>fn recursion() {\n    recursion()\n}\n\nrecursion(); # Outputs: RecursionError: Maximum recursion depth exceeded\n</code></pre>"},{"location":"femscript/operators/","title":"Operators","text":"<p>Femscript provides a variety of operators for performing arithmetic, comparison, assignment, and logical operations. These operators are intuitive and similar to those in other programming languages, making it easy to perform common tasks like mathematical calculations, value comparisons, and variable assignments.</p>"},{"location":"femscript/operators/#arithemtic-operators","title":"Arithemtic Operators","text":"<p>Arithemtic operators are used to perform basic mathematical operations:</p> Operator Description Example Result of x <code>+</code> Addition <code>x = 5 + 3</code> <code>8</code> <code>-</code> Subtraction <code>x = 10 - 7</code> <code>3</code> <code>*</code> Multiplication <code>x = 4 * 2</code> <code>8</code> <code>/</code> Division <code>x = 8 / 2</code> <code>4</code> <code>%</code> Modulus <code>x = 7 % 3</code> <code>1</code>"},{"location":"femscript/operators/#comparison-operators","title":"Comparison Operators","text":"<p>Comparison operators are used to compare two values and return a boolean (<code>true</code> or <code>false</code>):</p> Operator Description Example Result <code>==</code> Equal to <code>5 == 5</code> <code>true</code> <code>!=</code> Not equal to <code>5 != 3</code> <code>true</code> <code>&gt;</code> Greater than <code>7 &gt; 3</code> <code>true</code> <code>&gt;=</code> Greater than or equal to <code>5 &gt;= 5</code> <code>true</code> <code>&lt;</code> Less than <code>3 &lt; 7</code> <code>true</code> <code>&lt;=</code> Less than or equal to <code>3 &lt;= 3</code> <code>true</code>"},{"location":"femscript/operators/#assignment-operators","title":"Assignment Operators","text":"<p>Assignment operators allow you to assign values to variables. In addition to the basic assignment (<code>=</code>), Femscript provides shorthand operators for combining assignments with arithmetic operations:</p> Operator Description Example Result of x <code>=</code> Assign value <code>x = 10</code> <code>10</code> <code>+=</code> Add and assign <code>x = 5; x += 3</code> <code>8</code> <code>-=</code> Subtract and assign <code>x = 5; x -= 2</code> <code>3</code> <code>*=</code> Multiply and assign <code>x = 4; x *= 2</code> <code>8</code> <code>/=</code> Divide and assign <code>x = 8; x /= 2</code> <code>4</code> <code>%=</code> Modulus and assign <code>x = 7; x %= 3</code> <code>1</code>"},{"location":"femscript/operators/#logical-operators","title":"Logical Operators","text":"<p>Femscript supports logical operators for combining or inverting conditions. These are typically used within <code>if</code> statements or other conditional expressions:</p> Operator Description Example Result ! Logical NOT !true <code>false</code> and Logical AND true and false <code>false</code> or Logical OR true or false <code>true</code> 0 or 1 <code>1</code> \"\" or \"meow\" <code>meow</code>"},{"location":"femscript/operators/#example-usage","title":"Example Usage","text":"<p>Here's an example showcasing multiple operators in action:</p> <pre><code>x = 35;\ny = 34;\n\n# Arithmetic operations\ntotal = x + y;\ndifference = x - y;\nproduct = x * y;\nquotient = x / y;\nremainder = x % y;\n\n# Comparison\nis_equal = x == y; # false\nis_greater = x &gt; y; # true\n\n# Logical\ncondition = is_greater and x == y + 1; # true because x is greater than y and x equals y+1\n\n# Assignment shorthand\nx += 3; # x becomes 38\ny *= 2; # y becomes 68\n\nprint(\"Arithemtic:\");\nprint(format(\"  Sum: {total}\\n  Difference: {difference}\\n  Product: {product}\\n  Quotient: {quotient}\\n  Remainder: {remainder}\"));\nprint(format(\"\\nComparison:\"));\nprint(format(\"  Equal: {is_equal}\\n  Greater: {is_greater}\"));\nprint(format(\"\\nLogical condition: {condition}\"));\nprint(format(\"\\nx = {x}\\ny = {y}\"));\n\n# Outputs:\n# Arithemtic:\n#   Sum: 69\n#   Difference: 1\n#   Product: 1190\n#   Quotient: 1.0294117647058822\n#   Remainder: 1\n# Comparison:\n#   Equal: false\n#   Greater: true\n# Logical condition: true\n# x = 38\n# y = 68\n</code></pre>"},{"location":"femscript/scopes/","title":"Scopes","text":"<p>A scope in Femscript is a block of code enclosed within curly braces <code>{}</code>. It serves as a way to group variables, execute code, and structure data. Scopes can be used for code organization or for creating complex data structures, such as objects that store both data and logic.</p> <p>In Femscript, a scope is treated as a single token that encapsulates all variables and logic defined within it. Access to these variables is provided using dot notation (<code>.</code>).</p>"},{"location":"femscript/scopes/#creating-scopes","title":"Creating Scopes","text":"<p>Scopes are defined using <code>{}</code>. Within them, you can define variables, perform operations, and create nested scopes. For example:</p> <pre><code>student = {\n    id = 10;\n\n    grades = [3, 3, 4, 2, 5];\n    grades_sum = sum(grades);\n    average_grade = grades_sum / len(grades);\n\n    if { average_grade &gt;= 4.5 } {\n        scholarship = \"$420\";\n    } else {\n        scholarship = \"$69\";\n    }\n\n    person = {\n        name = \"Joe\";\n        surname = \"Doe\";\n        sex = \"female\";\n        age = 17;\n        is_adult = age &gt;= 18;\n    };\n};\n</code></pre> <p>In this example, <code>student</code> is a scope containing several variables and a nested scope <code>person</code>.</p>"},{"location":"femscript/scopes/#accessing-values-in-scopes","title":"Accessing Values in Scopes","text":"<p>To access variables or nested scopes, you use dot notation:</p> <pre><code>x = { x = 10; y = 20; };\nprint(x.x); # Outputs: 10\nprint(x.y); # Outputs: 20\n</code></pre> <p>For nested scopes, the same dot notation applies:</p> <pre><code>student = {\n    person = {\n        name = \"Joe\";\n        surname = \"Doe\";\n    };\n};\n\nprint(student.person.name); # Outputs: Joe\n</code></pre>"},{"location":"femscript/scopes/#accessing-lists-in-scopes","title":"Accessing Lists in Scopes","text":"<p>Lists defined inside scopes use index-based dot notation. Indices are zero-based:</p> <pre><code>classes = {\n    subjects = [\"math\", \"physics\", \"chemistry\"];\n};\nprint(classes.subjects.0); # Outputs: math\nprint(classes.subjects.1); # Outputs: physics\n</code></pre>"},{"location":"femscript/scopes/#borrowing-variables-with-borrow","title":"Borrowing Variables with <code>borrow()</code>","text":"<p>The <code>borrow</code> function allows you to \"borrow\" a variable from a parent scope into a nested scope. The borrowed variable can then be used in the nested scope. Borrowing is indicated by the <code>borrow()</code> function and the <code>&amp;</code> symbol for the borrowed variable.</p> <p>Example:</p> <pre><code>x = 10;\ny = {\n    borrow(x);\n    z = &amp;x + 2;\n};\nprint(y.z); # Outputs: 12\n</code></pre> <p>Explanation:</p> <ol> <li><code>x</code> is borrowed by the <code>y</code> scope.</li> <li>The variable <code>z</code> inside the <code>y</code> scope uses the borrowed value of <code>x</code>.</li> </ol>"},{"location":"femscript/syntax/","title":"Syntax","text":""},{"location":"femscript/syntax/#examples","title":"Examples","text":"<p>Some code examples for better understanding of the syntax</p> <pre><code>response = await(request(\"GET\", \"https://cenzura-api.poligon.lgbt/\"));\ndata = response.json;\n\nembed = Embed{color=randint(0, hex(\"ffffff\"))};\nembed.set_thumbnail{borrow(data); url=format(\"https://cdn.discordapp.com/avatars/{}/{}.png\", &amp;data.id, &amp;data.avatar)};\nembed.add_field{borrow(data); name=\"id:\"; value=&amp;data.id};\nembed.add_field{borrow(data); name=\"username:\"; value=&amp;data.username};\n\nreturn embed;\n</code></pre> <pre><code>emojis = [\"\u2764\ufe0f\", \"\ud83e\udde1\", \"\ud83d\udc9b\", \"\ud83d\udc9a\", \"\ud83d\udc99\", \"\ud83d\udc9c\"];\nemoji = get(emojis, randint(0, len(emojis)));\n\ncomments = [\n    \"Does this melody echo the quiet moments?\",\n    \"In the silence between notes, what do you hear?\",\n    \"Can a song capture the essence of longing?\",\n    \"Does this track reflect your hidden thoughts?\",\n    \"How does this music intertwine with your solitude?\",\n    \"Is there solace in the rhythms of your day?\",\n    \"Do these lyrics resonate with your unspoken fears?\"\n];\ncomment = get(comments, randint(0, len(comments)));\n\ntrack = lastfm.tracks.0;\n\nif { !track.tags } {\n    tags = track.artist.tags;\n} else {\n    tags = track.tags;\n}\n\nembed = Embed {\n    borrow(track, tags, emoji, comment);\n\n    fn map_tags(tag) { format(\"[{}]({})\", tag.name, tag.url) }\n\n    title = format(\"Now Playing: {}\", &amp;track.title);\n    description = format(\n        \"{} **Title:** [{}]({})\\n**Artist:** [{}]({})\\n**Album:** {}\\n**Genre:** {}\\n**Listeners:** {}\\n**Playcount:** {}\\n\\n**{}**\",\n        &amp;emoji, &amp;track.title, &amp;track.url,\n        &amp;track.artist.name, &amp;track.artist.url,\n        &amp;track.album.name,\n        join(map(&amp;tags, \"map_tags\"), \", \"),\n        &amp;track.listeners,\n        &amp;track.playcount,\n        &amp;comment\n    );\n    color = hex(\"2C2F33\");\n};\n\nembed.set_author {\n    borrow(user, lastfm);\n\n    name = format(\"{}'s lastfm\", &amp;lastfm.user.username);\n    icon_url = &amp;user.avatar_url;\n    url = format(\"https://last.fm/user/{}\", &amp;lastfm.user.username);\n};\n\nembed.set_thumbnail {\n        borrow(track);\n\n    url = &amp;track.image.3.url;\n};\n\nembed.add_field {\n    borrow(track);\n\n    name = \"Track Plays\";\n    value = format(\"\ud83d\udd04 {} times\", &amp;track.scrobbles);\n    inline = true;\n};\n\nembed.add_field {\n    borrow(track);\n\n    name = \"Artist Plays\";\n    value = format(\"\ud83c\udfb8 {} times\", &amp;track.artist.stats.userplaycount);\n    inline = true;\n};\n\n\nembed.add_field {\n    borrow(track);\n\n    name = \"Listeners\";\n    value = format(\"\ud83d\udc65 {} listeners\", &amp;track.listeners);\n    inline = true;\n};\n\nembed.set_footer {\n    borrow(lastfm);\n\n    text = format(\"\ud83d\udcca Total Scrobbles: {} | Powered by Last.fm\", &amp;lastfm.user.scrobbles);\n    icon_url = \"https://www.last.fm/static/images/lastfm_logo.png\";\n};\n\nreturn embed;\n</code></pre> <pre><code>command {\n    name = \"twitter\";\n    aliases = [\"tw\"];\n    arguments = {\n        name = \"str\";\n    };\n};\n\ncoro = request{borrow(name); method = \"GET\"; url = format(\"https://api.fxtwitter.com/{}\", &amp;name); headers = {\"user-agent\" = \"testybot/1.0\";};};\ndata = await(coro);\njson = data.json;\n\nif { data.status == 404 } {\n    return \"User not found\";\n} else {\n    embed = Embed{color=hex(\"1a8cd8\")};\n    embed.set_title(format(\"@{}\", json.user.screen_name));\n    embed.set_thumbnail{borrow(json); url = &amp;json.user.avatar_url};\n    embed.set_description(json.user.description);\n    embed.add_field{borrow(json); name = \"Stats\"; value = format(\"&gt;&gt;&gt; **Followers:** {}\\n**Following:** {}\\n**Likes:** {}\\n**Tweets:** {}\", str(&amp;json.user.followers), str(&amp;json.user.following), str(&amp;json.user.likes), str(&amp;json.user.tweets));};\n\n    return embed;\n}\n</code></pre>"},{"location":"femscript/syntax/#returning-values","title":"Returning Values","text":"<p>In Femscript, you can return an object without using the <code>return</code> keyword. Instead, the last line of the function (or block of code) will be implicitly returned. You can implicitly return an object without the return keyword</p> <pre><code>embed = Embed();\nembed\n</code></pre> <pre><code>\"Hello world!\"\n</code></pre>"},{"location":"femscript/syntax/#arguments-and-keyword-arguments","title":"Arguments and Keyword Arguments","text":"<p>Femscript distinguishes between two main types of passing data to functions: positional arguments (args) and keyword arguments (kwargs). Both are easy to use and allow flexible data passing.</p>"},{"location":"femscript/syntax/#positional-arguments","title":"Positional Arguments","text":"<p>Positional arguments are passed traditionally, where the order of the arguments matters. Example: <pre><code>request(method, url);\n</code></pre> Here, <code>method</code> and <code>url</code> are arguments passed to the <code>request</code> function. The order of arguments is important, and they must be passed in the same order as declared in the function definition.</p>"},{"location":"femscript/syntax/#keyword-arguments","title":"Keyword Arguments","text":"<p>Keyword arguments allow you to pass arguments in the form of key-value pairs. This way, you don't have to worry about the order of the arguments. It's especially useful when a function takes many arguments, or when you want to modify only specific ones. <pre><code>request{method=method; url=url};\n</code></pre></p> <p>In this case, the arguments are passed as key-value pairs. <code>method</code> and <code>url</code> are the keys, and their values are passed to the <code>request</code> function.</p>"},{"location":"femscript/types/","title":"Data Types","text":"<p>In Femscript, there are several built-in data types that allow you to store and manipulate various kinds of data. Each type is designed for a specific purpose, such as representing numbers, text, collections, or custom objects.</p>"},{"location":"femscript/types/#overview-of-data-types","title":"Overview of Data Types","text":"Type Description Example Str A sequence of characters representing text. <code>\"Hello, world!\"</code> Int An integer or floating-point number. <code>69</code> | <code>4.2</code> Bool A boolean value representing truth or falsehood. <code>true</code> | <code>false</code> None Represents the absence of a value or a <code>NoneType</code>. <code>none</code> List A collection of elements, which can include mixed types. <code>[\"example\", 69, [1, 2, 3]]</code> Scope A container that encapsulates variables within a defined scope. <code>{ x = 10; y = 20; z = 30; }</code> PyObject A Python object, such as an instance of a class or a callable. Error Represents an error state, used to convey issues or exceptions. <code>Error(\"description\")</code>"},{"location":"femscript/types/#descriptions-and-examples","title":"Descriptions And Examples","text":""},{"location":"femscript/types/#str","title":"Str","text":"<p>Str is a type used to represent text, enclosed in double quotes.</p> <p>Example:</p> <pre><code>greeting = \"Hello, world!\";\nprint(greeting); # Outputs: Hello, World!\n</code></pre>"},{"location":"femscript/types/#int","title":"Int","text":"<p>Int represents both integer and floating-point numbers.</p> <p>Example:</p> <pre><code>x = 69;\ny = 4.2;\nprint(x + y); # Outputs: 73.2\n</code></pre>"},{"location":"femscript/types/#bool","title":"Bool","text":"<p>Bool is a boolean type, representing either <code>true</code> or <code>false</code>.</p> <p>Example:</p> <pre><code>is_adult = true;\nis_teenager = false;\nprint(is_adult and !is_teenager); # Outputs: true\n</code></pre>"},{"location":"femscript/types/#none","title":"None","text":"<p>None represents the absence of a value. It is useful when you need to signify an \"empty\" or \"unset\" state.</p> <p>Example:</p> <pre><code>value = none;\nprint(value); # Outputs: none\n</code></pre>"},{"location":"femscript/types/#list","title":"List","text":"<p>List is a collection of elements. It can store mixed types, including other lists.</p> <p>Example:</p> <pre><code>items = [1, \"text\", [2, 3]];\nprint(items.0); # Outputs: 1\nprint(items.1); # Outputs: text\nprint(items.2); # Outputs: [2, 3]\n</code></pre>"},{"location":"femscript/types/#scope","title":"Scope","text":"<p>Scope acts as a container for variables and logic. It can be used to group related data.</p> <p>Example:</p> <pre><code>student = {\n    name = \"Joe\";\n    age = 17;\n    grades = [4, 3, 5];\n};\n\nprint(student.name); # Outputs: Joe\nprint(student.grades.2); # Outputs: 5\n</code></pre>"},{"location":"femscript/types/#pyobject","title":"PyObject","text":"<p>PyObject allows femscript to interact with Python objects. These can be instances, callables, or any other Python-defined entities.</p> Python binding example<pre><code>class Person:\n    def __init__(self, name: str, age: int) -&gt; None:\n        self.name = name\n        self.age = age\n\nfemscript.wrap_function(Person)# (1)!\n</code></pre> <ol> <li>You can find more about binding python objects here</li> </ol> <pre><code>person = Person(\"Joe\", 17);\nprint(type(person)); # Outputs: PyObject\n</code></pre>"},{"location":"femscript/types/#error","title":"Error","text":"<p>*Error is used to represent issues or exceptions. This type can be returned to indicate a problem during script execution.</p> <p>Example:</p> <pre><code>person = {\n    name = \"Joe\";\n    age = 17;\n};\n\nif { person.age &lt; 18 } {\n    Error(format(\"{} is too young\", person.name)); # Outputs (in python): Error: Joe is too young\n    # Execution stops here, because Joe is too young\n}\n\nprint(\"freaky things\");\n</code></pre>"},{"location":"femscript/types/#notes","title":"Notes","text":"<ul> <li>Dynamic typing: Femscript is dynamically typed, meaning you do not need to declare types explicitly.</li> <li>Type Inference: The interpreter determines the type based on the value assigned.</li> <li>Python Interoperability: The PyObject type allows seamless integration with Python, enabling advanced scripting capabilities.</li> </ul>"}]}